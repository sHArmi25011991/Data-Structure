def KMPSearch(pattern, text):
    M = len(pattern)
    N = len(text)

    # Create lps[] that will hold the longest prefix suffix values for pattern
    lps = [0] * M
    j = 0  # index for pattern[]

    # Preprocess the pattern (calculate lps[] array)
    computeLPSArray(pattern, M, lps)

    i = 0  # index for text[]
    while i < N:
        if pattern[j] == text[i]:
            i += 1
            j += 1

        if j == M:
            print(f"Pattern found at index {i - j}")
            j = lps[j - 1]
        elif i < N and pattern[j] != text[i]:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1

def computeLPSArray(pattern, M, lps):
    length = 0  # length of the previous longest prefix suffix
    lps[0] = 0  # lps[0] is always 0
    i = 1

    while i < M:
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]
            else:
                lps[i] = 0
                i += 1

# Sample Input 0
text = "ABABDABACDABABCABAB"
pattern = "AB"
KMPSearch(pattern, text)

# Sample Input 1
text = "ABABDABACDABABCABAB"
pattern = "A"
KMPSearch(pattern, text)
